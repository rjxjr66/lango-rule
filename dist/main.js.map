{"version":3,"sources":["webpack:///webpack/bootstrap af9232897cb8a2e0f7f2","webpack:///./src/index.ts","webpack:///./src/tree.ts","webpack:///./src/rule.interface.ts"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;AC7DA,iCAAuB;AACvB,iCAAiC;;;;;;;;;;ACEjC;IAII,cAAoB,KAAK;QAAL,UAAK,GAAL,KAAK;QACrB,IAAI,CAAC,KAAK,EAAE,CAAC;IACjB,CAAC;IAED,0BAAW,GAAX,UAAY,MAAa,EAAE,GAAU;QACjC,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;QACpB,KAAiB,UAAY,EAAZ,QAAG,CAAC,QAAQ,EAAZ,cAAY,EAAZ,IAAY,EAAE;YAA1B,IAAI,IAAI;YACT,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SAC/B;IACL,CAAC;IAEM,aAAQ,GAAf,UAAgB,IAAI;QAChB,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEtC,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,aAAQ,GAAf,UAAgB,IAAW;QACvB,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED,kBAAkB;IAClB,oBAAK,GAAL;QAEI,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,qBAAqB;IACrB,oBAAK,GAAL;QACI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;IACvB,CAAC;IAED,qBAAqB;IACrB,+CAA+C;IAC/C,qBAAM,GAAN,UAAO,IAAW;QACd,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9E,IAAI,KAAK,EAAE;YACP,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACxB,OAAO,KAAK,CAAC;SAChB;aAAM;YACH,OAAO,IAAI,CAAC;SACf;IACL,CAAC;IAED,aAAa;IACN,UAAK,GAAZ,UAAa,IAAW,EAAE,QAAoB;QAC1C,KAAoB,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAE;YAAzB,IAAI,OAAO;YACZ,QAAQ,OAAO,CAAC,GAAG,EAAE;gBACjB,KAAK,MAAM;oBACP,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC;oBAClC,MAAM;gBACN,KAAK,QAAQ;oBACT,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC;oBACpC,MAAM;gBACN,KAAK,QAAQ;oBACT,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC;oBACpC,MAAM;gBACN,KAAK,SAAS;oBACV,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC;oBACrC,MAAM;aACT;SACJ;IACL,CAAC;IAED,eAAe;IACf,kBAAG,GAAH;QACI,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,6BAA6B;IAC7B,qBAAM,GAAN;QACI,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACtB,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SACjD;aAAM;YACH,OAAO,IAAI,CAAC;SACf;IACL,CAAC;IAED,+BAA+B;IAC/B,2BAAY,GAAZ;QACI,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACtB,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YACrC,IAAI,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBACvD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAEzD,OAAO,IAAI,CAAC,QAAQ,CAAC;aACxB;iBAAM;gBACH,OAAO,IAAI,CAAC;aACf;SACJ;aAAM;YACH,OAAO,IAAI,CAAC;SACf;IACL,CAAC;IAED,+BAA+B;IAC/B,2BAAY,GAAZ;QACI,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACtB,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YACrC,IAAI,SAAS,IAAI,CAAC,EAAE;gBAChB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAEzD,OAAO,IAAI,CAAC,QAAQ,CAAC;aACxB;iBAAM;gBACH,OAAO,IAAI,CAAC;aACf;SACJ;aAAM;YACH,OAAO,IAAI,CAAC;SACf;IACL,CAAC;IAED,YAAY;IACZ,oBAAK,GAAL;QACI,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE;YAC/B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YAEnB,OAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;aAAM;YACH,OAAO,IAAI,CAAC;SACf;IACL,CAAC;IAED,8BAA8B;IACtB,6BAAc,GAAtB,UAAuB,IAAW,EAAE,MAAgB;QAChD,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YAC/B,OAAO,IAAI,CAAC;SACf;aAAM;YACH,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACf,KAAkB,UAAa,EAAb,SAAI,CAAC,QAAQ,EAAb,cAAa,EAAb,IAAa,EAAE;oBAA5B,IAAI,KAAK;oBACV,IAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;oBACjD,IAAI,KAAK,EAAE;wBACP,OAAO,KAAK,CAAC;qBAChB;iBACJ;aACJ;iBAAM;gBACH,OAAO,IAAI,CAAC;aACf;SACJ;IACL,CAAC;IAED,oDAAoD;IACpD,qEAAqE;IACrE,oDAAoD;IAC5C,yBAAU,GAAlB,UAAmB,IAAW,EAAE,MAAgB;QAC5C,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,IAAI,GAAG,KAAK,CAAC;QAEjB,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,KAAkB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM,EAAE;YAArB,IAAI,KAAK;YACV,IAAI,GAAG,GAAG,IAAI,CAAC;YAEf,4BAA4B;YAC5B,IAAI,SAAS,EAAE;gBACX,IAAI,KAAK,IAAI,GAAG,EAAE;oBACd,OAAO,KAAK,CAAC;iBAChB;qBAAM;oBACH,SAAS,GAAG,KAAK,CAAC;iBACrB;aACJ;YAED,QAAQ,KAAK,EAAE;gBACX,KAAK,GAAG;oBACJ,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;oBACnB,IAAI,GAAG,KAAK,CAAC;oBACjB,MAAM;gBACN,KAAK,GAAG;oBACJ,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;oBACpB,IAAI,GAAG,KAAK,CAAC;oBACjB,MAAM;gBACN,KAAK,GAAG;oBACJ,GAAG,GAAG,IAAI,CAAC,YAAY,EAAE;oBAC7B,MAAM;gBACN,KAAK,GAAG;oBACJ,IAAI,GAAG,IAAI,CAAC;oBAChB,MAAM;gBACN;oBACI,IAAM,MAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAC9B,IAAM,MAAM,GAAG,MAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAClC,IAAM,KAAK,GAAG,MAAI,CAAC,CAAC,CAAC,CAAC;oBACtB,eAAe;oBACf,IAAI,IAAI,EAAE;wBACN,IAAI,GAAG,KAAK,CAAC;wBAEb,sBAAsB;wBACtB,GAAG;4BACC,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gCACpC,IAAI,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE;oCAC7C,SAAS;iCACZ;gCACD,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC;gCACpB,MAAM,CAAC,UAAU;6BACpB;yBACJ,QAAQ,IAAI,CAAC,YAAY,EAAE,EAAC;wBAE7B,IAAI,CAAC,GAAG,EAAE;4BACN,OAAO,KAAK,CAAC;yBAChB;qBACJ;yBAAM;wBACH,iCAAiC;wBACjC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;4BACrC,OAAO,KAAK,CAAC;yBAChB;6BAAM;4BACH,IAAI,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE;gCAC7C,OAAO,KAAK,CAAC;6BAChB;4BACD,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC;yBACvB;qBACJ;oBACL,MAAM;aACT;YAED,kBAAkB;YAClB,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE;gBACf,IAAI,KAAK,IAAI,GAAG,EAAE;oBACd,8BAA8B;oBAC9B,SAAS,GAAG,IAAI,CAAC;iBACpB;qBAAM;oBACH,sBAAsB;oBACtB,OAAO,KAAK,CAAC;iBAChB;aACJ;SACJ;QAED,OAAQ,IAAI,CAAC;IACjB,CAAC;IAEc,eAAU,GAAzB,UAA0B,KAAa;QACnC,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,KAAc,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK,EAAE;YAAhB,IAAI,CAAC;YACN,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;gBACtB,IAAI,KAAK,EAAE;oBACP,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACnB,KAAK,GAAG,EAAE,CAAC;iBACd;gBAED,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAClB;iBAAM;gBACH,KAAK,IAAI,CAAC,CAAC;aACd;SACJ;QAED,IAAI,KAAK,EAAE;YACP,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtB;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,0BAAW,GAAnB,UAAoB,IAAW;QAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAExB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAEO,+BAAgB,GAAxB;QAAA,iBAMC;QALG,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAC,IAAI,QAAC,IAAI,KAAI,CAAC,QAAQ,EAAlB,CAAkB,CAAC,CAAC;SACrF;aAAM;YACH,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;SACtB;IACL,CAAC;IAEc,YAAO,GAAtB,UAAuB,IAAW,EAAE,GAAW;QAC3C,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACjC,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACpC,IAAM,SAAS,GAAY,EAAE,CAAC;QAE9B,IAAI,IAAI,GAAG,KAAK,CAAC;QACjB,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,oBAAoB,GAAG,KAAK,CAAC;QACjC,IAAI,kBAAkB,GAAG,KAAK,CAAC;QAC/B,KAAkB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM,EAAE;YAArB,IAAI,KAAK;YACV,QAAQ,KAAK,EAAE;gBACX,KAAK,GAAG;oBACJ,IAAI,CAAC,KAAK,EAAE,CAAC;oBACb,IAAI,GAAG,KAAK,CAAC;oBACjB,MAAM;gBACN,KAAK,GAAG;oBACJ,IAAI,IAAI,EAAE;wBACN,IAAI,GAAG,KAAK,CAAC;wBACb,IAAI,kBAAkB,EAAE;4BACpB,MAAM,GAAG,KAAK,CAAC;4BACf,kBAAkB,GAAG,KAAK,CAAC;4BAC3B,GAAG;gCACC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAC,IAAE,QAAC,IAAE,IAAI,CAAC,GAAG,EAAE,EAAb,CAAa,CAAC,EAAE;oCACnC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;iCAC9B;6BACJ,QAAQ,IAAI,CAAC,YAAY,EAAE,EAAC;yBAChC;qBACJ;oBAED,IAAI,CAAC,MAAM,EAAE,CAAC;oBAClB,MAAM;gBACN,KAAK,GAAG;oBACJ,IAAI,CAAC,YAAY,EAAE;oBACvB,MAAM;gBACN,KAAK,GAAG;oBACJ,IAAI,GAAG,IAAI,CAAC;oBAChB,MAAM;gBACN,KAAK,GAAG;oBACJ,IAAI,IAAI,EAAE;wBACN,oBAAoB,GAAG,IAAI,CAAC;qBAC/B;yBAAM;wBACH,MAAM,GAAG,IAAI,CAAC;qBACjB;oBACL,MAAM;gBACN,KAAK,GAAG;oBACJ,IAAI,IAAI,EAAE;wBACN,kBAAkB,GAAG,IAAI,CAAC;qBAC7B;yBAAM;wBACH,MAAM,GAAG,KAAK,CAAC;qBAClB;oBACL,MAAM;gBACN;oBACI,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAC7B,eAAe;oBACf,IAAI,IAAI,EAAE;wBACN,IAAI,GAAG,KAAK,CAAC;wBAEb,sBAAsB;wBACtB,GAAG;4BACC,IAAI,MAAM,IAAI,CAAC,kBAAkB,EAAE;gCAC/B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;6BACjC;4BAED,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gCACnC,IAAI,oBAAoB,EAAE;oCACtB,MAAM,GAAG,IAAI,CAAC;oCACd,oBAAoB,GAAG,KAAK,CAAC;oCAC7B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iCACjC;gCAED,MAAM,CAAC,UAAU;6BACpB;4BAED,IAAI,MAAM,IAAI,kBAAkB,EAAE;gCAC9B,MAAM,GAAG,KAAK,CAAC;gCACf,kBAAkB,GAAG,KAAK,CAAC;gCAC3B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;6BACjC;yBACJ,QAAQ,IAAI,CAAC,YAAY,EAAE,EAAC;qBAChC;yBAAM;wBACH,IAAI,MAAM,EAAE;4BACR,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;yBACjC;qBACJ;oBACL,MAAM;aACT;SACJ;QAED,OAAO,SAAS,CAAC;IACrB,CAAC;IAEc,UAAK,GAApB,UAAqB,IAAW,EAAE,IAAc;;QAC5C,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9C,IAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC;QAEjC,KAAK;QACL,IAAI,GAAG,GAAQ,MAAM,QAAE,CAAC;gCACf,MAAI;YACT,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAC,IAAE,QAAC,IAAE,MAAI,EAAP,CAAO,CAAC,EAAE,CAAC,CAAC,CAAC;;QAD/E,KAAiB,UAAG,EAAH,WAAG,EAAH,iBAAG,EAAH,IAAG;YAAf,IAAI,MAAI;oBAAJ,MAAI;SAEZ;QAED,KAAK;QACL,IAAI,MAAM,IAAI,MAAM,EAAE;YAClB,YAAM,CAAC,QAAQ,EAAC,IAAI,WAAI,GAAG,EAAE;SAChC;aAAM;YACH,YAAM,CAAC,QAAQ,EAAC,OAAO,WAAI,GAAG,EAAE;SACnC;IACL,CAAC;IAEc,YAAO,GAAtB,UAAuB,IAAW,EAAE,IAAc;;QAC9C,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9C,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAE7B,IAAI;QACJ,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAC,IAAE,QAAC,IAAE,MAAM,EAAT,CAAS,CAAC,EAAE,CAAC,CAAC,CAAC;QACnE,IAAI;QACJ,YAAM,CAAC,QAAQ,EAAC,IAAI,WAAI,MAAM,CAAC,QAAQ,EAAE;IAC7C,CAAC;IAEc,YAAO,GAAtB,UAAuB,IAAW,EAAE,IAAc;IAElD,CAAC;IAEc,aAAQ,GAAvB,UAAwB,IAAW,EAAE,IAAc;IAEnD,CAAC;IACL,WAAC;AAAD,CAAC;AAhZY,oBAAI;;;;;;;;;ACHjB,uCAAuC;;AAyFvC,IAAY,QAKX;AALD,WAAY,QAAQ;IAChB,6BAAiB;IACjB,yBAAa;IACb,6BAAiB;IACjB,+BAAmB;AACvB,CAAC,EALW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAKnB","file":"dist\\main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap af9232897cb8a2e0f7f2","export * from './tree';\r\nexport * from './rule.interface';\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","// import { INode, IRule, ICommand, IRuleNode } from \"./rule.interface\";\r\nimport {INode, IRule, ICommand, IRuleNode} from \"./\"\r\n\r\nexport class Tree {\r\n    private _curNode: INode;\r\n    private _curIndex: number;\r\n\r\n    constructor(private _tree) {\r\n        this.reset();\r\n    }\r\n\r\n    buildParent(parent: INode, cur: INode) {\r\n        cur.parent = parent;\r\n        for (let node of cur.children) {\r\n            this.buildParent(cur, node);\r\n        }\r\n    }\r\n\r\n    static fromJSON(json) {\r\n        const tree = new Tree(json.rootNode);\r\n        tree.buildParent(null, tree._curNode);\r\n\r\n        return tree;\r\n    }\r\n\r\n    static fromNode(node: INode) {\r\n        return new Tree(node);\r\n    }\r\n\r\n    // 트리를 xml 로 변환한다.\r\n    toXML(): string {\r\n\r\n        return null;\r\n    }\r\n\r\n    // 노드 포인터를 루트노드로 옮긴다.\r\n    reset() {\r\n        this._curNode = this._tree;\r\n        this._curIndex = 0;\r\n    }\r\n\r\n    // 패턴과 매칭되는 노드를 선택한다.\r\n    // 선택된 노드를 현재 노드로 설정하고 매칭된 노드가 없으면 null 을 리턴한다.\r\n    search(rule: IRule): INode {\r\n        this.reset();\r\n        const match = this._loopMatchNode(this._curNode, Tree._getTokens(rule.match));\r\n        if (match) {\r\n            this._setCurrent(match);\r\n            return match;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // 커맨드를 적용한다.\r\n    static apply(node: INode, commands: ICommand[]) {\r\n        for (let command of commands) {\r\n            switch (command.cmd) {\r\n                case 'MOVE':\r\n                    Tree._move(node, command.args)\r\n                break;\r\n                case 'DELETE':\r\n                    Tree._delete(node, command.args)\r\n                break;\r\n                case 'CREATE':\r\n                    Tree._create(node, command.args)\r\n                break;\r\n                case 'REPLACE':\r\n                    Tree._replace(node, command.args)\r\n                break;\r\n            }\r\n        }        \r\n    }\r\n\r\n    // 현재 노드를 리턴한다.\r\n    cur() {\r\n        return this._curNode;\r\n    }\r\n\r\n    // 부모 노드로 이동하고 리턴한다. 실패시 null\r\n    parent() {\r\n        if (this._curNode.parent) {            \r\n            return this._setCurrent(this._curNode.parent);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // 다음 형제노드로 이동하고 리턴한다. 실패시 null\r\n    nextSibiling() {\r\n        if (this._curNode.parent) {\r\n            const nextIndex = this._curIndex + 1;\r\n            if (nextIndex <= this._curNode.parent.children.length - 1) {\r\n                this._curIndex = nextIndex;\r\n                this._curNode = this._curNode.parent.children[nextIndex];\r\n\r\n                return this._curNode;\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // 이전 형제노드로 이동하고 리턴한다. 실패시 null\r\n    prevSibiling() {\r\n        if (this._curNode.parent) {\r\n            const prevIndex = this._curIndex - 1;\r\n            if (prevIndex >= 0) {\r\n                this._curIndex = prevIndex;\r\n                this._curNode = this._curNode.parent.children[prevIndex];\r\n\r\n                return this._curNode;\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // 자식 노드로 이동\r\n    child() {\r\n        if (this._curNode.children.length) {\r\n            this._curNode = this._curNode.children[0];\r\n            this._curIndex = 0;\r\n\r\n            return this._curNode;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // 트리를 LL로 돌면서 매칭되는 노드가 있는지 순회\r\n    private _loopMatchNode(node: INode, tokens: string[]) {\r\n        if (this._matchRule(node, tokens)) {            \r\n            return node;\r\n        } else {\r\n            if (node.children) {\r\n                for (let _node of node.children) {\r\n                    const match = this._loopMatchNode(_node, tokens);\r\n                    if (match) {\r\n                        return match;\r\n                    }\r\n                }\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Node와 RuleNode가 매칭되는지 확인한다. (같은 Depth의 regex로 검색)\r\n    // ex) S (NP (PRP)) (VP (VBP) (SBAR (...))) 와 S(*+VP(*+[SBAR|...]+*))\r\n    // 일때 S와 S, NP+VP와 *+VP+*, VBP+SBAR와 *+SBAR+* 단계로 검색\r\n    private _matchRule(node: INode, tokens: string[]) {\r\n        const tree = Tree.fromNode(node);\r\n        let star = false;\r\n\r\n        let checkNext = false;\r\n        for (let token of tokens) {\r\n            let cur = null;\r\n\r\n            // 다음 노드가 없을 때 * 이 아니면 false\r\n            if (checkNext) {\r\n                if (token != '*') {\r\n                    return false;\r\n                } else {\r\n                    checkNext = false;\r\n                }\r\n            }\r\n\r\n            switch (token) {\r\n                case '(':\r\n                    cur = tree.child();\r\n                    star = false;\r\n                break;\r\n                case ')':\r\n                    cur = tree.parent();\r\n                    star = false;\r\n                break;\r\n                case '+':\r\n                    cur = tree.nextSibiling()\r\n                break;\r\n                case '*':\r\n                    star = true;\r\n                break;\r\n                default:\r\n                    const node = token.split('=');\r\n                    const _token = node[0].split('|');\r\n                    const lemma = node[1];\r\n                    // 이전 토큰이 * 인경우\r\n                    if (star) {\r\n                        star = false;\r\n\r\n                        // 노드가 나올때까지 다음 노드로 이동\r\n                        do {\r\n                            if (_token.includes(tree._curNode.pos)) {\r\n                                if (lemma && lemma != tree._curNode.token.lemma) {\r\n                                    continue;\r\n                                }\r\n                                cur = tree._curNode;\r\n                                break; // 노드가 검색됨\r\n                            }\r\n                        } while (tree.nextSibiling())\r\n\r\n                        if (!cur) {\r\n                            return false;\r\n                        }\r\n                    } else {\r\n                        // 이전 토큰이 * 이 아닌경우 노드가 반드시 일치해야 함\r\n                        if (!_token.includes(tree._curNode.pos)) {\r\n                            return false;\r\n                        } else {\r\n                            if (lemma && lemma != tree._curNode.token.lemma) {\r\n                                return false;\r\n                            }\r\n                            cur = tree._curNode;\r\n                        }\r\n                    }\r\n                break;\r\n            }\r\n\r\n            // 형제나 다음 노드가 없을 때\r\n            if (!cur && !star) {\r\n                if (token == '+') {\r\n                    // 형제가 없을 때 다음 토큰이 * 인지 검사해야 함\r\n                    checkNext = true;\r\n                } else {\r\n                    // 자식, 부모, 해당 노드가 없을 때\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    private static _getTokens(match: string) {\r\n        let tokens = [];\r\n        let token = '';\r\n        for (let c of match) {\r\n            if ('()+[]='.includes(c)) {\r\n                if (token) {\r\n                    tokens.push(token);\r\n                    token = '';\r\n                }\r\n\r\n                tokens.push(c);\r\n            } else {\r\n                token += c;\r\n            }\r\n        }\r\n\r\n        if (token) {\r\n            tokens.push(token);\r\n        }\r\n\r\n        return tokens;\r\n    }\r\n\r\n    private _setCurrent(node: INode) {\r\n        this._curNode = node;\r\n        this._setCurrentIndex();\r\n\r\n        return this._curNode;\r\n    }\r\n\r\n    private _setCurrentIndex() {\r\n        if (this._curNode.parent) {\r\n            this._curIndex = this._curNode.parent.children.findIndex(_ => _ == this._curNode);\r\n        } else {\r\n            this._curIndex = 0;\r\n        }\r\n    }\r\n\r\n    private static _select(node: INode, arg: string) {\r\n        const tree = Tree.fromNode(node);\r\n        const tokens = Tree._getTokens(arg);\r\n        const selection: INode[] = [];\r\n\r\n        let star = false;\r\n        let select = false;\r\n        let shouldStartSelection = false;\r\n        let shouldEndSelection = false;\r\n        for (let token of tokens) {\r\n            switch (token) {\r\n                case '(':\r\n                    tree.child();\r\n                    star = false;\r\n                break;\r\n                case ')':\r\n                    if (star) {\r\n                        star = false;\r\n                        if (shouldEndSelection) {\r\n                            select = false;\r\n                            shouldEndSelection = false;\r\n                            do {\r\n                                if (!selection.find(_=>_==tree.cur())) {\r\n                                    selection.push(tree.cur());\r\n                                }\r\n                            } while (tree.nextSibiling())\r\n                        }\r\n                    }\r\n\r\n                    tree.parent();\r\n                break;\r\n                case '+':\r\n                    tree.nextSibiling()\r\n                break;\r\n                case '*':\r\n                    star = true;\r\n                break;\r\n                case '[':\r\n                    if (star) {\r\n                        shouldStartSelection = true;\r\n                    } else {\r\n                        select = true;\r\n                    }\r\n                break;\r\n                case ']':\r\n                    if (star) {\r\n                        shouldEndSelection = true;\r\n                    } else {\r\n                        select = false;\r\n                    }\r\n                break;\r\n                default:\r\n                    let nodes = token.split('|');\r\n                    // 이전 토큰이 * 인경우\r\n                    if (star) {\r\n                        star = false;\r\n\r\n                        // 노드가 나올때까지 다음 노드로 이동\r\n                        do {\r\n                            if (select && !shouldEndSelection) {\r\n                                selection.push(tree._curNode);\r\n                            }\r\n\r\n                            if (nodes.includes(tree._curNode.pos)) {\r\n                                if (shouldStartSelection) {\r\n                                    select = true;\r\n                                    shouldStartSelection = false;\r\n                                    selection.push(tree._curNode);\r\n                                }\r\n\r\n                                break; // 노드가 검색됨\r\n                            }\r\n\r\n                            if (select && shouldEndSelection) {\r\n                                select = false;\r\n                                shouldEndSelection = false;\r\n                                selection.push(tree._curNode);\r\n                            }\r\n                        } while (tree.nextSibiling())\r\n                    } else {\r\n                        if (select) {\r\n                            selection.push(tree._curNode);\r\n                        }\r\n                    }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return selection;\r\n    }\r\n\r\n    private static _move(node: INode, args: string[]) {\r\n        const source = Tree._select(node, args[0]);\r\n        const target = Tree._select(node, args[1])[0];\r\n        const method = args[3] || 'push';\r\n\r\n        // 삭제\r\n        let tmp = [ ...source ];\r\n        for (let node of tmp) {\r\n            node.parent.children.splice(node.parent.children.findIndex(_=>_==node), 1);\r\n        }\r\n\r\n        // 삽입\r\n        if (method == 'push') {\r\n            target.children.push(...tmp);\r\n        } else {\r\n            target.children.unshift(...tmp);\r\n        }\r\n    }\r\n\r\n    private static _delete(node: INode, args: string[]) {\r\n        const target = Tree._select(node, args[0])[0];\r\n        const parent = target.parent;\r\n\r\n        //삭제\r\n        parent.children.splice(parent.children.findIndex(_=>_==target), 1);\r\n        //삽입\r\n        parent.children.push(...target.children);\r\n    }\r\n\r\n    private static _create(node: INode, args: string[]) {\r\n        \r\n    }\r\n\r\n    private static _replace(node: INode, args: string[]) {\r\n        \r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/tree.ts","// 주석으로 달아놓긴 했는데 README.md 작성 필요할것같아요..\r\n\r\nexport type POS = 'S' | 'SBAR' | 'NP' | 'VP' | 'ADJP' | 'ADVP' | 'PP' | 'WHNP' | 'WHADJP' | 'WHAVP' | 'WHPP' | 'IN' | 'CC' | 'TO' | 'EX' | 'WDT' |\r\n    'WP' | 'WP$' | 'WRB' | 'NN' | 'NNS' | 'NNP' | 'NNPS' | 'PRP' | 'VB' | 'VBP' | 'VBZ' | 'MD' | 'PRT' | 'JJ' | 'JJR' | 'JJS' | 'DT' | 'PRP$' |\r\n    'CD' | 'VBG' | 'VBN' | 'RB' | 'RBS' | 'NP-TMP';\r\n\r\n\r\nexport interface IRule {\r\n    name?: string;\r\n    match: string; // 자식관계는 (), 형제관계는 +, lemma는 =\r\n    tokens?: string[];\r\n    tree?: IRuleNode;\r\n    commands: ICommand[];\r\n    relations: IRelation[]; // 관계 패턴\r\n    // apply: Function;\r\n}\r\n\r\n/*******\r\n* Rule 작성 예시\r\n\r\nS(\r\n    VP(\r\n        *+NP|S|PP|SBAR|ADJP|ADVP+*\r\n    )\r\n)\r\n\r\n********/\r\n\r\nexport interface ICommand {\r\n    cmd: ECommand;\r\n    tree?: ICommandNode;\r\n    args?: string[]; // 피연산자(타겟 노드). Rule 작성 규칙을 따르되 선택할 노드는 [], match 된 트리 중 root 노드 기준으로 작성\r\n}\r\n/*******\r\n* Command 작성 예시 - NP|S|PP|SBAR|ADJP|ADVP 이후의 노드들을 모두 S 로 연결\r\n{\r\n    cmd: ECommand.MOVE,\r\n    args: [\r\n        `\r\n        S(\r\n            VP(\r\n                *+[NP|S|PP|SBAR|ADJP|ADVP+*]\r\n            )\r\n        )\r\n        `,\r\n        `\r\n        [S]\r\n        `\r\n    ]\r\n}\r\n\r\n********/\r\n\r\n\r\ninterface IRelation {\r\n    relation?: string; // ex1) nmod, ex2) nsubj|nsubjpass, ex3) nsubj&xcomp\r\n    node1?: string; // 검색 패턴으로 선택\r\n    node2?: string; // 검색 패턴으로 선택, optional\r\n}\r\n\r\nexport interface INode {\r\n    pos: POS;\r\n    parent: INode;\r\n    children: INode[];\r\n    word: string;\r\n    token: IToken;\r\n    matchRules: IRule[];\r\n}\r\n\r\nexport interface IToken {\r\n    index?: number;\r\n    lemma?: string;\r\n}\r\n\r\nexport interface IRuleNode {\r\n    tokens: string[];\r\n    parent: IRuleNode;\r\n    word: string;\r\n    lemma: string;\r\n    children: IRuleNode[];\r\n}\r\n\r\nexport interface ICommandNode {\r\n    tokens: string[];\r\n    parent: ICommandNode;\r\n    children?: ICommandNode[];\r\n    sources?: string[]\r\n}\r\n\r\nexport enum ECommand {\r\n    DELETE = \"DELETE\",\r\n    MOVE = \"MOVE\",\r\n    CREATE = \"CREATE\",\r\n    REPLACE = \"REPLACE\",\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/rule.interface.ts"],"sourceRoot":""}