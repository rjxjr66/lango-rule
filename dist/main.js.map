{"version":3,"sources":["webpack:///webpack/bootstrap 4c6d885b2caf2ec3a4a3","webpack:///./src/index.ts","webpack:///./src/tree.ts"],"names":[],"mappings":"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","file":"dist/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4c6d885b2caf2ec3a4a3","export { Tree } from \"./tree\";\nexport { INode, IRule, ICommand } from \"./rule.interface\";\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","// import { INode, IRule, ICommand, IRuleNode } from \"./rule.interface\";\nimport { INode, IRule, ICommand } from \"./\"\nimport { POS } from \"./rule.interface\";\n\nexport class Tree {\n    private _curNode: INode;\n    private _curIndex: number;\n\n    constructor(private _tree) {\n        this.reset();\n    }\n\n    buildParent(parent: INode, cur: any) {\n        cur.parent = parent;\n        for (let node of cur.children) {\n            this.buildParent(cur, node);\n        }\n    }\n\n    static fromJSON(json) {\n        const tree = new Tree(json.rootNode);\n        tree.buildParent(null, tree._curNode);\n\n        return tree;\n    }\n\n    static fromNode(node: INode) {\n        return new Tree(node);\n    }\n\n    // 트리를 xml 로 변환한다.\n    toXML(): string {\n\n        return null;\n    }\n\n    // 노드 포인터를 루트노드로 옮긴다.\n    reset() {\n        this._curNode = this._tree;\n        this._curIndex = 0;\n    }\n\n    // 패턴과 매칭되는 노드를 선택한다.\n    // 선택된 노드를 현재 노드로 설정하고 매칭된 노드가 없으면 null 을 리턴한다.\n    search(rule: IRule): INode {\n        this.reset();\n        const match = this._loopMatchNode(this._curNode, Tree._getTokens(rule.match));\n        if (match) {\n            this._setCurrent(match);\n            return match;\n        } else {\n            return null;\n        }\n    }\n\n    // 커맨드를 적용한다.\n    static apply(node: INode, commands: ICommand[]) {\n        for (let command of commands) {\n            switch (command.cmd) {\n                case 'MOVE':\n                    Tree._move(node, command.args)\n                    break;\n                case 'DELETE':\n                    Tree._delete(node, command.args)\n                    break;\n                case 'CREATE':\n                    Tree._create(node, command.args)\n                    break;\n                case 'SET':\n                    Tree._set(node, command.args)\n                    break;\n                case 'REPLACE':\n                    Tree._replace(node, command.args)\n                    break;\n                case 'ELEMENT':\n                    Tree._element(node, command.args)\n                    break;\n            }\n        }\n    }\n\n    // 현재 노드를 리턴한다.\n    cur() {\n        return this._curNode;\n    }\n\n    // 부모 노드로 이동하고 리턴한다. 실패시 null\n    parent() {\n        if (this._curNode.parent) {\n            return this._setCurrent(this._curNode.parent);\n        } else {\n            return null;\n        }\n    }\n\n    // 다음 형제노드로 이동하고 리턴한다. 실패시 null\n    nextSibiling() {\n        if (this._curNode.parent) {\n            const nextIndex = this._curIndex + 1;\n            if (nextIndex <= this._curNode.parent.children.length - 1) {\n                this._curIndex = nextIndex;\n                this._curNode = this._curNode.parent.children[nextIndex];\n\n                return this._curNode;\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    // 이전 형제노드로 이동하고 리턴한다. 실패시 null\n    prevSibiling() {\n        if (this._curNode.parent) {\n            const prevIndex = this._curIndex - 1;\n            if (prevIndex >= 0) {\n                this._curIndex = prevIndex;\n                this._curNode = this._curNode.parent.children[prevIndex];\n\n                return this._curNode;\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    // 자식 노드로 이동\n    child() {\n        if (this._curNode.children.length) {\n            this._curNode = this._curNode.children[0];\n            this._curIndex = 0;\n\n            return this._curNode;\n        } else {\n            return null;\n        }\n    }\n\n    // 트리를 LL로 돌면서 매칭되는 노드가 있는지 순회\n    private _loopMatchNode(node: INode, tokens: string[]) {\n        if (this._matchRule(node, tokens)) {\n            return node;\n        } else {\n            if (node.children) {\n                for (let _node of node.children) {\n                    const match = this._loopMatchNode(_node, tokens);\n                    if (match) {\n                        return match;\n                    }\n                }\n            } else {\n                return null;\n            }\n        }\n    }\n\n    // Node와 RuleNode가 매칭되는지 확인한다. (같은 Depth의 regex로 검색)\n    // ex) S (NP (PRP)) (VP (VBP) (SBAR (...))) 와 S(*+VP(*+[SBAR|...]+*))\n    // 일때 S와 S, NP+VP와 *+VP+*, VBP+SBAR와 *+SBAR+* 단계로 검색\n    private _matchRule(node: INode, tokens: string[]) {\n        const tree = Tree.fromNode(node);\n        let star = false;\n\n        let checkNext = false;\n        for (let token of tokens) {\n            let cur = null;\n\n            // 다음 노드가 없을 때 * 이 아니면 false\n            if (checkNext) {\n                if (token != '*') {\n                    return false;\n                } else {\n                    checkNext = false;\n                }\n            }\n\n            switch (token) {\n                case '(':\n                    cur = tree.child();\n                    star = false;\n                    break;\n                case ')':\n                    cur = tree.parent();\n                    star = false;\n                    break;\n                case '+':\n                    cur = tree.nextSibiling()\n                    break;\n                case '*':\n                    star = true;\n                    break;\n                default:\n                    const node = token.split('=');\n                    const _token = node[0].split('|');\n                    const lemma = node[1];\n                    // 이전 토큰이 * 인경우\n                    if (star) {\n                        star = false;\n\n                        // 노드가 나올때까지 다음 노드로 이동\n                        do {\n                            if (_token.includes(tree._curNode.pos)) {\n                                if (lemma && lemma != tree._curNode.token.lemma) {\n                                    continue;\n                                }\n                                cur = tree._curNode;\n                                break; // 노드가 검색됨\n                            }\n                        } while (tree.nextSibiling())\n\n                        if (!cur) {\n                            return false;\n                        }\n                    } else {\n                        // 이전 토큰이 * 이 아닌경우 노드가 반드시 일치해야 함\n                        if (!_token.includes(tree._curNode.pos)) {\n                            return false;\n                        } else {\n                            if (lemma && lemma != tree._curNode.token.lemma) {\n                                return false;\n                            }\n                            cur = tree._curNode;\n                        }\n                    }\n                    break;\n            }\n\n            // 형제나 다음 노드가 없을 때\n            if (!cur && !star) {\n                if (token == '+') {\n                    // 형제가 없을 때 다음 토큰이 * 인지 검사해야 함\n                    checkNext = true;\n                } else {\n                    // 자식, 부모, 해당 노드가 없을 때\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    private static _getTokens(match: string) {\n        let tokens = [];\n        let token = '';\n        for (let c of match) {\n            if ('()+[]='.includes(c)) {\n                if (token) {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(c);\n            } else {\n                token += c;\n            }\n        }\n\n        if (token) {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    private _setCurrent(node: INode) {\n        this._curNode = node;\n        this._setCurrentIndex();\n\n        return this._curNode;\n    }\n\n    private _setCurrentIndex() {\n        if (this._curNode.parent) {\n            this._curIndex = this._curNode.parent.children.findIndex(_ => _ == this._curNode);\n        } else {\n            this._curIndex = 0;\n        }\n    }\n\n    private static _select(node: INode, arg: string) {\n        const tree = Tree.fromNode(node);\n        const tokens = Tree._getTokens(arg);\n        const selection: INode[] = [];\n\n        let star = false;\n        let select = false;\n        let shouldStartSelection = false;\n        let shouldEndSelection = false;\n        for (let token of tokens) {\n            switch (token) {\n                case '(':\n                    tree.child();\n                    star = false;\n                    break;\n                case ')':\n                    if (star) {\n                        star = false;\n                        if (shouldEndSelection) {\n                            select = false;\n                            shouldEndSelection = false;\n                            do {\n                                if (!selection.find(_ => _ == tree.cur())) {\n                                    selection.push(tree.cur());\n                                }\n                            } while (tree.nextSibiling())\n                        }\n                    }\n\n                    tree.parent();\n                    break;\n                case '+':\n                    tree.nextSibiling()\n                    break;\n                case '*':\n                    star = true;\n                    break;\n                case '[':\n                    if (star) {\n                        shouldStartSelection = true;\n                    } else {\n                        select = true;\n                    }\n                    break;\n                case ']':\n                    if (star) {\n                        shouldEndSelection = true;\n                    } else {\n                        select = false;\n                    }\n                    break;\n                default:\n                    let nodes = token.split('|');\n                    // 이전 토큰이 * 인경우\n                    if (star) {\n                        star = false;\n\n                        // 노드가 나올때까지 다음 노드로 이동\n                        do {\n                            if (select && !shouldEndSelection) {\n                                selection.push(tree._curNode);\n                            }\n\n                            if (nodes.includes(tree._curNode.pos)) {\n                                if (shouldStartSelection) {\n                                    select = true;\n                                    shouldStartSelection = false;\n                                    selection.push(tree._curNode);\n                                }\n\n                                break; // 노드가 검색됨\n                            }\n\n                            if (select && shouldEndSelection) {\n                                select = false;\n                                shouldEndSelection = false;\n                                selection.push(tree._curNode);\n                            }\n                        } while (tree.nextSibiling())\n                    } else {\n                        if (select) {\n                            selection.push(tree._curNode);\n                        }\n                    }\n                    break;\n            }\n        }\n\n        return selection;\n    }\n\n    private static _move(node: INode, args: string[]) {\n        const source = Tree._select(node, args[0]);\n        const target = Tree._select(node, args[1])[0];\n        const method = args[3] || 'push';\n\n        // 삭제\n        let tmp = [...source];\n        for (let node of tmp) {\n            node.parent.children.splice(node.parent.children.findIndex(_ => _ == node), 1);\n        }\n\n        // 삽입\n        if (method == 'push') {\n            target.children.push(...tmp);\n        } else {\n            target.children.unshift(...tmp);\n        }\n    }\n\n    private static _delete(node: INode, args: string[]) {\n        const target = Tree._select(node, args[0])[0];\n        const parent = target.parent;\n\n        //삭제\n        parent.children.splice(parent.children.findIndex(_ => _ == target), 1);\n        //삽입\n        parent.children.push(...target.children);\n    }\n\n    private static _create(node: INode, args: string[]) {\n\n    }\n\n    private static _set(node: INode, args: string[]) {\n        const target = Tree._select(node, args[0])[0];\n        if (!target.attr) {\n            target.attr = {}\n        }\n\n        target.attr[args[1]] = args[2];\n    }\n\n    private static _replace(node: INode, args: string[]) {\n        const target = Tree._select(node, args[0])[0];\n        target.pos = args[1] as POS;\n    }\n\n    private static _element(node: INode, args: string[]) {\n        const target = Tree._select(node, args[0])[0];\n        target.element = args[1];\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/tree.ts"],"sourceRoot":""}